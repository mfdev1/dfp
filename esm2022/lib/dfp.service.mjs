import { DOCUMENT, isPlatformBrowser } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { EMPTY, Subject, timer } from 'rxjs';
import { buffer, filter, switchMap, take } from 'rxjs/operators';
import { DELAY_TIME, GPT_LOADER } from './consts';
import { EVENT_TYPES, eventFactory, RewardedSlotReadyEvent, RewardedSlotGrantedEvent, RewardedSlotClosedEvent, SlotRenderEndedEvent, } from './events';
import { DisplaySlot, RefreshSlot } from './actions';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class DfpService {
    get events() {
        return this.$events.asObservable();
    }
    constructor(platformId, document, gptLoader) {
        this.platformId = platformId;
        this.document = document;
        this.gptLoader = gptLoader;
        this.$singleRequest = new Subject();
        this.$events = new Subject();
        this.disableRefreshSlots = false;
        if (isPlatformBrowser(this.platformId)) {
            this.init();
        }
    }
    init() {
        // GPT
        this.gptLoader.subscribe((gptSource) => {
            this.appendScript({ async: true, src: gptSource });
        });
        // Single Request Queue
        this.$singleRequest
            .pipe(buffer(this.$singleRequest.pipe(switchMap(() => timer(DELAY_TIME * 2)))))
            .subscribe((acts) => {
            if (this.beforeDisplay && typeof this.beforeDisplay === 'function') {
                this.beforeDisplay(acts.map(act => act.slot));
            }
            const refreshSlots = [];
            acts.forEach((act) => {
                if (act instanceof DisplaySlot) {
                    googletag.display(act.slot);
                }
                if (act instanceof RefreshSlot ||
                    googletag.pubads().isInitialLoadDisabled()) {
                    refreshSlots.push(act.slot);
                }
            });
            if (refreshSlots.length > 0 && !this.disableRefreshSlots) {
                googletag.pubads().refresh(refreshSlots);
            }
        });
        // Event Listeners
        googletag.cmd.push(() => {
            EVENT_TYPES.forEach((type) => googletag.pubads().addEventListener(type, (event) => {
                this.$events.next(eventFactory(type, event));
            }));
        });
    }
    define(ad, definedSlot) {
        const id = ad.id || '';
        let slot;
        if (definedSlot) {
            slot = definedSlot;
        }
        else {
            const exists = this.getSlot(id);
            if (exists) {
                this.destroy(exists);
            }
            if (ad.size) {
                slot = googletag.defineSlot(ad.unitPath, ad.size, id);
            }
            else {
                slot = googletag.defineOutOfPageSlot(ad.unitPath, id);
            }
        }
        slot
            .clearCategoryExclusions()
            .clearTargeting()
            .defineSizeMapping(ad.sizeMapping || [])
            .updateTargetingFromMap(ad.targeting || {})
            .setClickUrl(ad.clickUrl || '')
            .setForceSafeFrame(ad.forceSafeFrame || false)
            .setSafeFrameConfig(ad.safeFrameConfig || {});
        if (ad.categoryExclusion instanceof Array) {
            ad.categoryExclusion.forEach((cat) => slot.setCategoryExclusion(cat));
        }
        else if ('string' === typeof ad.categoryExclusion) {
            slot.setCategoryExclusion(ad.categoryExclusion);
        }
        if (ad.collapseEmptyDiv instanceof Array) {
            slot.setCollapseEmptyDiv(ad.collapseEmptyDiv[0], ad.collapseEmptyDiv[1]);
        }
        else if ('boolean' === typeof ad.collapseEmptyDiv) {
            slot.setCollapseEmptyDiv(ad.collapseEmptyDiv);
        }
        const attributes = ad.adsense || {};
        for (const key in attributes) {
            const attributeName = key;
            slot.set(attributeName, attributes[attributeName] ?? '');
        }
        slot.addService(googletag.pubads());
        googletag.enableServices();
        return slot;
    }
    display(slot) {
        this.$singleRequest.next(new DisplaySlot(slot));
    }
    refresh(slot) {
        this.$singleRequest.next(new RefreshSlot(slot));
    }
    /**
     * Displays a rewarded ad. This method should not be called until the user has consented to view the ad.
     */
    rewarded(ad) {
        const rewarded = googletag.defineOutOfPageSlot(ad.unitPath, googletag.enums.OutOfPageFormat.REWARDED);
        if (rewarded === null) {
            return EMPTY;
        }
        googletag.display(this.define(ad, rewarded));
        return this.events.pipe(filter((event) => {
            if (event.slot === rewarded) {
                if (event instanceof RewardedSlotReadyEvent) {
                    event.makeRewardedVisible();
                }
                return ((event instanceof SlotRenderEndedEvent && event.isEmpty) ||
                    event instanceof RewardedSlotGrantedEvent ||
                    event instanceof RewardedSlotClosedEvent);
            }
            return false;
        }), take(1));
    }
    destroy(slot) {
        googletag.destroySlots([slot]);
    }
    getSlot(elementId) {
        return this.getSlots().find((slot) => elementId === slot.getSlotElementId());
    }
    getSlots(elementIds) {
        const slots = googletag.pubads().getSlots();
        return slots.filter((slot) => !elementIds || elementIds.indexOf(slot.getSlotElementId()) !== -1);
    }
    /**
     * Use googletag.cmd.push() to execute the callback function.
     * @param callback
     */
    cmd(callback) {
        if (isPlatformBrowser(this.platformId)) {
            googletag.cmd.push(callback);
            return true;
        }
        return false;
    }
    appendScript(options, parentNode) {
        parentNode = parentNode || this.document.head;
        const oldScript = options.id
            ? parentNode.querySelector('#' + options.id)
            : null;
        const script = this.document.createElement('script');
        Object.assign(script, options, { type: 'text/javascript' });
        if (oldScript) {
            parentNode.replaceChild(script, oldScript);
        }
        else {
            this.appendText('\n', parentNode);
            parentNode.appendChild(script);
            this.appendText('\n', parentNode);
        }
        return script;
    }
    appendText(data, parentNode) {
        parentNode = parentNode || this.document.head;
        const text = this.document.createTextNode(data);
        parentNode.appendChild(text);
        return text;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: DfpService, deps: [{ token: PLATFORM_ID }, { token: DOCUMENT }, { token: GPT_LOADER }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: DfpService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.2", ngImport: i0, type: DfpService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [GPT_LOADER]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,